" Enable pathogen
execute pathogen#infect()

" Indent automatically depending on filetype
filetype plugin indent on

" Do not wrap text by default.
set nowrap

" Turn on line numbering. Turn it off with "set nonu"
set nu
set rnu

" Set left-margin to one char width (looks better with :se nonu)
"set foldcolumn=1

" Set syntax on
syntax on

" Automatically save before commands like :next and :make
set autowrite

" seoul256 (dark):
"   Range:   233 (darkest) ~ 239 (lightest)
"   Default: 237
let g:seoul256_background = 234

" seoul256 (light):
"   Range:   252 (darkest) ~ 256 (lightest)
"   Default: 253
let g:seoul256_light_background = 253

" https://github.com/junegunn/seoul256.vim
colorschem seoul256

" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Stop certain movements from always going to the first character of a line.
" While this behavior deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" To help solve the :Wq annoyance
:command WQ wq
:command Wq wq
:command W w
:command Q q

" Fix horrible MatchParen colors. Stop making it look like the cursor... "
" This line must come after the colorscheme line! "
"hi MatchParen cterm=bold ctermbg=none ctermfg=red gui=bold guifg=red guibg=red

" Section wise status line
set statusline=\ %f%m%r%h%w "" file name and flags
set statusline+=\ %=%({%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y}%) "" Type|Enc|Fmt
set statusline+=\ [TS:%{&ts}\|SW:%{&sw}\|ET:%{&et}] "" File WS settings [tabstop|shiftwidth|expandtabs]
set statusline+=\ %([%l,%v][%p%%]\ %) "" File stats [line,chars][percentage]
set laststatus=2
hi StatusLine ctermbg=250 ctermfg=236

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_browse_split = 4
let g:netrw_altv = 1

" Set the window size to 20%
let g:netrw_winsize = 20

" Disable banner and change list style to tree
let g:netrw_banner = 0
let g:netrw_liststyle = 3

" Removes trailing spaces
function TrimWhiteSpace()
  %s/\s*$//
  ''
endfunction

" Function key maps
map <F2> :call TrimWhiteSpace()<CR>
map <F3> :set nu! rnu!<CR>
map <F4> :set wrap!<CR>
map <F5> :setlocal spell! spelllang=en_us<CR>
map <F6> :Git blame

" Set wraps when composing emails
au BufRead,BufNewFile *.mail *patch *.txt setlocal textwidth=72

" Resource tmux.conf file after saving it
autocmd bufwritepost .tmux.conf execute ':!tmux source-file %'
autocmd bufwritepost .tmux.local.conf execute ':!tmux source-file %'

" If a file is already open, open it in RO mode.
autocmd SwapExists * let v:swapchoice = "o"

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

" have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Go to middle of a line
map gm :call cursor(0, virtcol('$')/2)<CR>

" Physical Page-Up and Page-Down work as Ctrl-U/Ctrl-D
nnoremap <silent> <PageUp> <C-U>
vnoremap <silent> <PageUp> <C-U>
inoremap <silent> <PageUp> <C-\><C-O><C-U>
nnoremap <silent> <PageDown> <C-D>
vnoremap <silent> <PageDown> <C-D>
inoremap <silent> <PageDown> <C-\><C-O><C-D>

" Remap Shift + Up/Down to behave like normal Up/Down
nnoremap <S-Up> <Up>
nnoremap <S-Down> <Down>

" Remap vertical selection to <c-q>
:nnoremap <c-q> <c-v>

" Disable EX mode
nnoremap Q <Nop>

" Create swp files in /tmp/
set backupdir=/tmp//,.
set directory=/tmp//,.

" With syntax on kernel doc is unreadable
au FileType rst setlocal syntax=off

" Disable command line history browser
map q: <Nop>

" Set modlines so commet lines can set vim config
" Eg., vim: set ts=4
set modeline
set modelines=5

" CTags Workflow:
" ---------------
"   - <C-]>	to jump to first tag
"   - <C-t>	to go back in tag stack
"   - g<C-]>	to list all tags
"
" Set tag file to tags and search backwards (see :help file-searching) in the
" directory tree for the file.
set tags=./tags,tags;

" look for tag file inside .git/ directory. Prepend to tags variable as this
" file might always be the most recent version (updated via git-hooks)
set tags^=./.git/tags

" Buffer Workflow:
" ----------------
" Show current buffers in a buffer listing "drawer" with \ + b (from buffergator)
"    - <ENTER>	to edit the selected buffer in the previous window
"    - <C-V>	to edit the selected buffer in a new vertical split
"    - <C-S>	to edit the selected buffer in a new horizontal split
"    - <C-T>	to edit the selected buffer in a new tab page
" - \]	- Move to the next buffer
" - \[	- Move to the previous buffer
" - \q	- Close the current buffer and move to the previous one
set hidden "" allow buffers to be hidden if you've modified a buffer.
nmap <leader>] :bnext<CR>
nmap <leader>[ :bprevious<CR>
nmap <leader>q :bp <BAR> bd #<CR>

" Spell Check Usage:
" ------------------
"   - ]s, [s	for next, previous
"   - z=	for suggestions
"   - zg, gw	for good, wrong words.
set spelllang=en_us
set spellfile=$HOME/.vim/spell/en.utf-8.add

map <F5> :setlocal spell! spelllang=en_us<CR>

" File encoding
set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

" VimDiff:
" --------
if &diff
	set cursorline
	map . ]c
	map , [c
	"hi DiffAdd    ctermfg=233 ctermbg=LightGreen guifg=#003300 guibg=#DDFFDD gui=none cterm=none
	"hi DiffChange ctermbg=white  guibg=#ececec gui=none   cterm=none
	"hi DiffText   ctermfg=233  ctermbg=yellow  guifg=#000033 guibg=#DDDDFF gui=none cterm=none
endif
